#docker version
version: "3.8"

#container list
services: 

  frontend:   # 서비스명
    build: 
      context : ./frontend/next-app  #Dockerfile이 위치한 디렉토리 지정. yml이 있는 디렉토리 기준 상대경로
      #dockerfile: Dockerfile.dev # 개발환경에서. 배포할 땐 주석처리
    #ports:  #컨테이너 포트 설정. 만약 해당 컨테이너 내부에서 별도의 포트를 지정해준다면 그것과 맞출 것
    # - "3000:3000"
    depends_on:  # Specifies the startup order between services : 컨테이너 순서 지정
      - backend
    environment:
      - SSR_API_BASE_URL=${SSR_API_BASE_URL}
    image: blog-frontend:latest # 빌드된 이미지 이름 지정.
    
  backend:
    build: ./backend   
    #ports: 
    #  - "8089:8089"
    environment:  #백엔드에서 사용하는 환경변수 주입. 
    # compose.yml이 위치한 디렉토리의 .env -> backend container로 주입.
      - DB_URL=${DB_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - db
    image: blog-backend:latest # 빌드된 이미지 이름 지정.
 
  db :
    image: postgres:16  # Postgres version - recommended 14+, 16 is latest 
    ports: 
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USERNAME} #POSTGRES_USER는 도커에서 고정된 키워드
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=postgres #db연결명 : 환경변수 DB_URL에서 마지막 부분과 동일하게  
    volumes: #호스트 시스템과 컨테이너 사이에 파일이나 폴더 공유. 컨테이너가 종료되어도 데이터 유지, 초기 데이터 주입, 소스코드 공유.
      # - <호스트 경로> : <컨테이너 경로>
      # 호스트 경로 : 실제 컴퓨터의 디렉토리 또는 파일
      # 컨테이너 경로 : 컨테이너 내부의 디렉토리
      - db_data:/var/lib/postgresql/data #DB 영속화
      - ./db:/docker-entrypoint-initdb.d # /docker-entrypoint-initdb.d : 컴포즈 실행 시 호스트 폴더를 스캔해 처리

  nginx:
    build: 
      context : ./nginx
    ports: # 외부에서는 nginx의 80 포트로만 접근 가능
      - "8080:80" # 호스트의 8080포트를 컨테이너의 80포트로 매핑
    depends_on:
      - frontend
      - backend
    restart: always # nginx 컨테이너가 중지되면 자동으로 재시작
volumes:
  db_data : # 이름있는 볼륨 정의  

